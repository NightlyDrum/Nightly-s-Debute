local UIManager = {}
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

-- Create the main window
function UIManager:CreateWindow(title)
	local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
	local ScreenGui = Instance.new("ScreenGui", PlayerGui)
	local MainFrame = Instance.new("Frame", ScreenGui)
	MainFrame.Size = UDim2.new(0.5, 0, 0.5, 0)
	MainFrame.Position = UDim2.new(0.25, 0, 0.25, 0)
	MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)

	local UICorner = Instance.new("UICorner", MainFrame)
	UICorner.CornerRadius = UDim.new(0, 10)

	local TitleLabel = Instance.new("TextLabel", MainFrame)
	TitleLabel.Size = UDim2.new(1, 0, 0, 50)
	TitleLabel.Text = title
	TitleLabel.BackgroundTransparency = 1
	TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TitleLabel.Font = Enum.Font.SourceSansBold
	TitleLabel.TextScaled = true

	local Topbar = Instance.new("Frame", MainFrame)
	Topbar.Size = UDim2.new(1, 0, 0, 50)
	Topbar.Position = UDim2.new(0, 0, 0, 0)
	Topbar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)

	local TabHolder = Instance.new("Frame", MainFrame)
	TabHolder.Size = UDim2.new(1, 0, 1, -50)
	TabHolder.Position = UDim2.new(0, 0, 0, 50)
	TabHolder.BackgroundTransparency = 1

	UIManager.MainFrame = MainFrame
	UIManager.Topbar = Topbar
	UIManager.TabHolder = TabHolder

	return UIManager
end

-- Function to create a new tab
function UIManager:MakeTab(tabInfo)
	local TabButton = Instance.new("TextButton", self.Topbar)
	TabButton.Size = UDim2.new(0, 100, 0, 50)
	TabButton.Text = tabInfo.Name
	TabButton.BackgroundTransparency = 1

	TabButton.MouseButton1Click:Connect(function()
		for _, child in ipairs(self.TabHolder:GetChildren()) do
			if child:IsA("Frame") then
				child:Destroy()
			end
		end

		local ContentFrame = Instance.new("Frame")
		ContentFrame.Size = UDim2.new(1, 0, 1, 0)
		ContentFrame.BackgroundTransparency = 1
		ContentFrame.Parent = self.TabHolder

		if tabInfo.Callback then
			tabInfo.Callback(ContentFrame)
		end
	end)

	return TabButton
end

-- Function to create a slider
function UIManager.CreateSlider(container, label, min, max, defaultValue)
	local SliderLabel = Instance.new("TextLabel")
	SliderLabel.Size = UDim2.new(0, 100, 0, 50)
	SliderLabel.Text = label
	SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	SliderLabel.BackgroundTransparency = 1
	SliderLabel.Parent = container

	local SliderFrame = Instance.new("Frame")
	SliderFrame.Size = UDim2.new(1, -20, 0, 10) -- Adjust size
	SliderFrame.Position = UDim2.new(0, 0, 0, 60) -- Position below the label
	SliderFrame.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
	SliderFrame.Parent = container

	local SliderButton = Instance.new("Frame")
	SliderButton.Size = UDim2.new(0, 10, 1, 0)
	SliderButton.BackgroundColor3 = Color3.fromRGB(255, 105, 180)
	SliderButton.Parent = SliderFrame

	-- Function to update the slider value based on user input
	local function updateSlider(value)
		local percent = (value - min) / (max - min)
		SliderButton.Position = UDim2.new(percent, 0, 0, 0)
	end

	-- Initialize slider to default value
	updateSlider(defaultValue)

	-- Connect input events to update the slider
	SliderButton.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local mouse = game.Players.LocalPlayer:GetMouse()
			local connection
			connection = game:GetService("RunService").RenderStepped:Connect(function()
				local sliderPos = math.clamp(mouse.X - SliderFrame.AbsolutePosition.X, 0, SliderFrame.AbsoluteSize.X)
				local value = math.floor((sliderPos / SliderFrame.AbsoluteSize.X) * (max - min) + min)
				updateSlider(value)
			end)

			-- Stop updating when the mouse is released
			input.InputEnded:Connect(function()
				connection:Disconnect()
			end)
		end
	end)
end

-- Function to create a toggle
function UIManager.CreateToggle(container, label, initialState, callback)
	local ToggleLabel = Instance.new("TextLabel")
	ToggleLabel.Size = UDim2.new(0, 150, 0, 50) -- Adjust as necessary
	ToggleLabel.Text = label
	ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	ToggleLabel.BackgroundTransparency = 1
	ToggleLabel.Parent = container

	local ToggleBox = Instance.new("Frame")
	ToggleBox.Size = UDim2.new(0, 30, 0, 30) -- Size of the toggle box
	ToggleBox.Position = UDim2.new(0, 0, 0, 10) -- Position next to the label
	ToggleBox.BackgroundColor3 = initialState and Color3.fromRGB(255, 105, 180) or Color3.fromRGB(40, 40, 40) -- Color based on state
	ToggleBox.Parent = container

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 5)
	UICorner.Parent = ToggleBox

	-- Function to update toggle state
	local function updateToggle()
		ToggleBox.BackgroundColor3 = ToggleBox.BackgroundColor3 == Color3.fromRGB(40, 40, 40) and Color3.fromRGB(255, 105, 180) or Color3.fromRGB(40, 40, 40)
		callback(ToggleBox.BackgroundColor3 == Color3.fromRGB(255, 105, 180))
	end

	-- Connect click event to toggle state
	ToggleBox.MouseButton1Click:Connect(updateToggle)
	updateToggle() -- Initialize with the correct state
end

-- Function to create notifications
function UIManager.CreateNotification(message, duration)
	local ScreenGui = game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ScreenGui")
	local NotificationFrame = Instance.new("Frame")
	NotificationFrame.Size = UDim2.new(0, 150, 0, 50)
	NotificationFrame.Position = UDim2.new(1, 0, 1, -60)
	NotificationFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	NotificationFrame.BorderSizePixel = 0
	NotificationFrame.BackgroundTransparency = 0.8
	NotificationFrame.Parent = ScreenGui

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 5)
	UICorner.Parent = NotificationFrame

	local NotificationText = Instance.new("TextLabel")
	NotificationText.Size = UDim2.new(1, 0, 1, 0)
	NotificationText.Position = UDim2.new(0, 0, 0, 0)
	NotificationText.Text = message
	NotificationText.TextColor3 = Color3.fromRGB(255, 105, 180)
	NotificationText.Font = Enum.Font.SourceSansBold
	NotificationText.TextScaled = true
	NotificationText.BackgroundTransparency = 1
	NotificationText.Parent = NotificationFrame

	NotificationFrame.Position = UDim2.new(1, 0, 1, -60) -- Start off-screen
	local tweenIn = TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(1, -160, 1, -60), BackgroundTransparency = 0.8})
	tweenIn:Play()

	task.delay(duration or 3, function()
		local tweenOut = TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(1, 0, 1, -60), BackgroundTransparency = 1})
		tweenOut:Play()
		tweenOut.Completed:Connect(function()
			NotificationFrame:Destroy()
		end)
	end)
end

return UIManager
