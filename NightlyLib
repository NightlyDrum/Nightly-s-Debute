local UIManager = {}
UIManager.Tabs = {}
UIManager.ContentFrame = nil

function UIManager:CreateUI()
    local ScreenGui = Instance.new("ScreenGui")
    local Container = Instance.new("Frame")
    local Topbar = Instance.new("Frame")
    local Tabs = Instance.new("Frame")
    local TextLabel = Instance.new("TextLabel")
    local Content = Instance.new("Frame")
    local UIListLayout = Instance.new("UIListLayout")

    -- Set UI properties
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    Container.Name = "Container"
    Container.Parent = ScreenGui
    Container.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    Container.BorderColor3 = Color3.fromRGB(105, 0, 157)
    Container.Position = UDim2.new(0.0378228799, 0, 0.140287772, 0)
    Container.Size = UDim2.new(0, 747, 0, 383)

    Topbar.Name = "Topbar"
    Topbar.Parent = Container
    Topbar.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
    Topbar.BorderColor3 = Color3.fromRGB(105, 0, 157)
    Topbar.Size = UDim2.new(0, 747, 0, 33)

    Tabs.Name = "Tabs"
    Tabs.Parent = Topbar
    Tabs.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
    Tabs.BorderSizePixel = 0
    Tabs.Size = UDim2.new(1, 0, 1, 0)

    -- Organize the tabs in the Tabs container
    UIListLayout.Parent = Tabs
    UIListLayout.FillDirection = Enum.FillDirection.Horizontal
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 5)
    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right

    TextLabel.Parent = Topbar
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0.01, 0, 0, 0)
    TextLabel.Size = UDim2.new(0, 124, 0, 33)
    TextLabel.Font = Enum.Font.SourceSans
    TextLabel.Text = "Nightly Debute |"
    TextLabel.TextColor3 = Color3.fromRGB(255, 0, 255)
    TextLabel.TextScaled = true

    Content.Name = "Content"
    Content.Parent = Container
    Content.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Content.BorderColor3 = Color3.fromRGB(105, 0, 157)
    Content.Position = UDim2.new(0, 0, 0.103489168, 0)
    Content.Size = UDim2.new(1, 0, 1, -33)

    self.ScreenGui = ScreenGui
    self.TabsFrame = Tabs
    self.ContentFrame = Content
end

-- Create a tab
function UIManager:MakeTab(config)
    local Tab = Instance.new("TextButton")
    Tab.Name = config.Name
    Tab.Size = UDim2.new(0, 100, 1, 0)
    Tab.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Tab.Text = config.Name
    Tab.TextColor3 = Color3.fromRGB(255, 255, 255)
    Tab.Parent = self.Tabs

    table.insert(self.Tabs, Tab)

    Tab.MouseButton1Click:Connect(function()
        -- Hide other tabs content
        for _, child in ipairs(self.ContentFrame:GetChildren()) do
            if child:IsA("Frame") then
                child.Visible = false
            end
        end

        -- Show the selected tab content
        local tabContent = self.ContentFrame:FindFirstChild(config.Name .. "_Content")
        if tabContent then
            tabContent.Visible = true
        end
    end)

    return Tab
end

function UIManager:AddToggle(config)
    local tabContent = self.ContentFrame:FindFirstChild(config.Tab .. "_Content")

    if not tabContent then
        tabContent = Instance.new("Frame")
        tabContent.Name = config.Tab .. "_Content"
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        tabContent.Parent = self.ContentFrame
    end

    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(0, 100, 0, 40)
    toggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    toggleFrame.Position = UDim2.new(0, 10, 0, 10) -- Space from the top-left

    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = config.Name or "Toggle"
    toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleLabel.Font = Enum.Font.SourceSans
    toggleLabel.TextScaled = true
    toggleLabel.Parent = toggleFrame

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 30, 0, 30)
    toggleButton.Position = UDim2.new(0.8, 0, 0.5, -15)
    toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    toggleButton.BorderColor3 = Color3.fromRGB(105, 0, 157)
    toggleButton.Text = ""
    toggleButton.Parent = toggleFrame

    local isToggled = config.Default or false
    toggleButton.BackgroundColor3 = isToggled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)

    toggleButton.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        toggleButton.BackgroundColor3 = isToggled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        if config.Callback then
            config.Callback(isToggled)
        end
    end)

    toggleFrame.Parent = tabContent

    return toggleFrame
end

-- Add a slider to a tab
function UIManager:AddSlider(config)
    local tabContent = self.ContentFrame:FindFirstChild(config.Tab .. "_Content")

    if not tabContent then
        tabContent = Instance.new("Frame")
        tabContent.Name = config.Tab .. "_Content"
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        tabContent.Parent = self.ContentFrame
    end

    -- Create the slider frame
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(0, 200, 0, 60)
    sliderFrame.Position = UDim2.new(0, 10, 0, 50) -- Position with space below toggle
    sliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    sliderFrame.Parent = tabContent

    -- Slider Label
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Size = UDim2.new(1, 0, 0.3, 0)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = config.Name or "Slider"
    sliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sliderLabel.Font = Enum.Font.SourceSans
    sliderLabel.TextScaled = true
    sliderLabel.Parent = sliderFrame

    -- Slider Bar
    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(1, 0, 0.2, 0)
    sliderBar.Position = UDim2.new(0, 0, 0.3, 0)
    sliderBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderBar.Parent = sliderFrame

    -- Slider Knob
    local sliderKnob = Instance.new("TextButton")
    sliderKnob.Size = UDim2.new(0, 20, 0, 20)
    sliderKnob.Position = UDim2.new((config.Default - config.Min) / (config.Max - config.Min), -10, 0, -10) -- Calculate initial position
    sliderKnob.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    sliderKnob.Text = ""
    sliderKnob.Parent = sliderBar

    local currentValue = config.Default or 0
    local increment = config.Increment or 1

    -- Slider functionality
    local function updateValue()
        local value = math.floor(currentValue / increment) * increment
        if config.Callback then
            config.Callback(value)
        end
    end

    sliderKnob.MouseButton1Down:Connect(function()
        local function moveKnob(input)
            local newPosition = UDim2.new(
                math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1),
                -10,
                0
            )
            sliderKnob.Position = newPosition

            currentValue = math.floor(newPosition.X.Scale * (config.Max - config.Min) + config.Min)
            updateValue()
        end

        -- Connect to dragging
        local connection
        connection = game:GetService("UserInputService").InputChanged:Connect(moveKnob)

        -- Stop dragging on release
        game:GetService("UserInputService").InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                connection:Disconnect()
            end
        end)
    end)

    return sliderFrame
end

return UIManager
