local UIManager = {}
UIManager.Tabs = {}
UIManager.ContentFrame = nil

function UIManager:CreateUI()
    local ScreenGui = Instance.new("ScreenGui")
    local Container = Instance.new("Frame")
    local Topbar = Instance.new("Frame")
    local Tabs = Instance.new("Frame")
    local TextLabel = Instance.new("TextLabel")
    local Content = Instance.new("Frame")
    local UIListLayout = Instance.new("UIListLayout")

    -- Set UI properties
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    Container.Name = "Container"
    Container.Parent = ScreenGui
    Container.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    Container.BorderColor3 = Color3.fromRGB(105, 0, 157)
    Container.Position = UDim2.new(0.0378228799, 0, 0.140287772, 0)
    Container.Size = UDim2.new(0, 747, 0, 383)

    Topbar.Name = "Topbar"
    Topbar.Parent = Container
    Topbar.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
    Topbar.BorderColor3 = Color3.fromRGB(105, 0, 157)
    Topbar.Size = UDim2.new(0, 747, 0, 33)

    Tabs.Name = "Tabs"
    Tabs.Parent = Topbar
    Tabs.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
    Tabs.BorderSizePixel = 0
    Tabs.Size = UDim2.new(1, 0, 1, 0)

    -- Organize the tabs in the Tabs container
    UIListLayout.Parent = Tabs
    UIListLayout.FillDirection = Enum.FillDirection.Horizontal
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 5)
    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right

    TextLabel.Parent = Topbar
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0.01, 0, 0, 0)
    TextLabel.Size = UDim2.new(0, 124, 0, 33)
    TextLabel.Font = Enum.Font.SourceSans
    TextLabel.Text = "Nightly Debute |"
    TextLabel.TextColor3 = Color3.fromRGB(255, 0, 255)
    TextLabel.TextScaled = true

    Content.Name = "Content"
    Content.Parent = Container
    Content.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Content.BorderColor3 = Color3.fromRGB(105, 0, 157)
    Content.Position = UDim2.new(0, 0, 0.103489168, 0)
    Content.Size = UDim2.new(1, 0, 1, -33)

    self.ScreenGui = ScreenGui
    self.TabsFrame = Tabs
    self.ContentFrame = Content
end

function UIManager:MakeTab(tabConfig)
    local tabName = tabConfig.Name or "Tab"

    local newTab = Instance.new("TextButton")
    newTab.Name = tabName
    newTab.Parent = self.TabsFrame
    newTab.Size = UDim2.new(0, 100, 1, 0)
    newTab.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
    newTab.BorderColor3 = Color3.fromRGB(105, 0, 157)
    newTab.Font = Enum.Font.SourceSans
    newTab.Text = tabName
    newTab.TextColor3 = Color3.fromRGB(255, 255, 255)
    newTab.TextScaled = true
    newTab.TextWrapped = true

    -- Add functionality to switch to tab content
    newTab.MouseButton1Click:Connect(function()
        for _, child in pairs(self.ContentFrame:GetChildren()) do
            child.Visible = false
        end
        local tabContent = self.ContentFrame:FindFirstChild(tabName .. "_Content")
        if tabContent then
            tabContent.Visible = true
        end
    end)

    -- Set up content for the tab
    local tabContent = Instance.new("Frame")
    tabContent.Name = tabName .. "_Content"
    tabContent.Parent = self.ContentFrame
    tabContent.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    tabContent.BorderColor3 = Color3.fromRGB(105, 0, 157)
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.Visible = false

    return newTab
end

function UIManager:AddToggle(config)
    local tabContent = self.ContentFrame:FindFirstChild(config.Tab .. "_Content")

    if not tabContent then
        tabContent = Instance.new("Frame")
        tabContent.Name = config.Tab .. "_Content"
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        tabContent.Parent = self.ContentFrame
    end

    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(0, 100, 0, 40)
    toggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    toggleFrame.Position = UDim2.new(0, 10, 0, 10)

    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = config.Name or "Toggle"
    toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleLabel.Font = Enum.Font.SourceSans
    toggleLabel.TextScaled = true
    toggleLabel.Parent = toggleFrame

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 30, 0, 30)
    toggleButton.Position = UDim2.new(0.8, 0, 0.5, -15)
    toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    toggleButton.BorderColor3 = Color3.fromRGB(105, 0, 157)
    toggleButton.Text = ""
    toggleButton.Parent = toggleFrame

    local isToggled = config.Default or false
    toggleButton.BackgroundColor3 = isToggled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)

    toggleButton.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        toggleButton.BackgroundColor3 = isToggled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        if config.Callback then
            config.Callback(isToggled)
        end
    end)

    toggleFrame.Parent = tabContent

    return toggleFrame
end

return UIManager
